#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]... FILE|URL...

Options:
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Arguments:
    FILE
        input certificate filename
    URL
        website url which employs tls
EOF
}

while (( $# > 0 )); do
    case ${1} in
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

clean_up () {
    true
}

trap clean_up EXIT

for i in "$@"; do
    CERT=

    if [ -e "${i}" ]; then
        if [ -f "${i}" ]; then
            if [ -r "${i}" ]; then
                if [ -s "${i}" ]; then
                    CERT=$(cat "${i}" 2> /dev/null)
                else
                    warn "✗ file is empty: ‘${i}’"
                    continue
                fi
            else
                warn "✗ read permission not granted: ‘${i}’"
                continue
            fi
        else
            warn "✗ not a regular file: ‘${i}’"
            continue
        fi
    else
        CERT=$(openssl s_client -connect "${i}" < /dev/null 2> /dev/null)
    fi

    if [ -z "${CERT}" ]; then
        warn "✗ unable to establish tls connection: ‘${i}’"
        continue
    fi

    printf '\n%s\n\n' "[ ${i} ]"

    openssl x509 -noout -text -fingerprint <<< "${CERT}"
done
