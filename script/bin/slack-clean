#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]...

Options:
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit
EOF
}

: "${MESSAGE_RETENTION:=86400}"

# shellcheck disable=SC1090
source "$(git -C "$(dirname "$(realpath "${0}")")" rev-parse --show-toplevel)/.privacy/slack.cfg"

while (( $# > 0 )); do
    case ${1} in
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

export MESSAGE_RETENTION

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

clean_up () {
    true
}

trap clean_up EXIT

list=$(curl --fail --location --silent --show-error --request GET \
    --header "Authorization: Bearer ${TOKEN}" \
    --get \
    --data "channel=${GROUP}" \
    --data inclusive=true \
    --data limit=100 \
    --data oldest=0 \
    https://slack.com/api/conversations.history \
    | python3 -c '
import json
import os
import sys
import time

response = json.load(sys.stdin)

if response["ok"]:
    for message in response["messages"]:
        if message["ts"] < str(time.time() - int(os.environ["MESSAGE_RETENTION"])):
            print(message["ts"])
    ' \
    | tac)

if [ -z "${list}" ]; then
    echo 'ok: nil'
    exit
fi

for i in ${list}; do

    curl --fail --location --silent --show-error --request DELETE \
        --header "Authorization: Bearer ${TOKEN}" \
        --data "channel=${GROUP}" \
        --data "ts=${i}" \
        https://slack.com/api/chat.delete \
        | python3 -c '
import json
import sys

response = json.load(sys.stdin)

print(response["ok"])
        '

done
