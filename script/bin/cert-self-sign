#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]... CERT_NAME

Options:
    --algorithm ALGORITHM (ED25519 | ED448 | RSA)
        use the specified public key algorithm (default: RSA)
    --digest
        enable digest (default: false)
    --strict
        enable strict verification (default: false)
    --verbose
        enable verbose inspection (default: false)
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Arguments:
    CERT_NAME
        common name of the end certificate to be generated
EOF
}

PUBLIC_KEY_ALGORITHM=RSA
ENABLE_DIGEST=false
STRICT_VERIFICATION=false
VERBOSE=false

while (( $# > 0 )); do
    case ${1} in
    --algorithm)
        : "${2?✗ option parsing failed: missing value for ‘${1}’}"
        case ${2} in
        ED25519 | ED448 | RSA)
            PUBLIC_KEY_ALGORITHM=${2}
            shift 2
            ;;
        *)
            die "✗ option parsing failed: acceptable values for ‘${1}’ are ED25519 | ED448 | RSA"
            ;;
        esac
        ;;
    --digest)
        ENABLE_DIGEST=true
        shift
        ;;
    --strict)
        STRICT_VERIFICATION=true
        shift
        ;;
    --verbose)
        VERBOSE=true
        shift
        ;;
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

CERT_NAME=${1?✗ argument parsing failed: missing argument ‘CERT_NAME’}
shift

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

clean_up () {
    true
}

trap clean_up EXIT

digest () {
    echo +--
    openssl pkey -in "${1}".key -pubout | openssl sha512
    openssl pkey -pubin -in "${1}".pub | openssl sha512
    openssl req -in "${1}".csr -noout -pubkey | openssl sha512
    openssl x509 -in "${1}".crt -noout -pubkey | openssl sha512
    echo --+
}

inspect () {
    echo +--
    printf '\n%s\n\n' "[ ${1}.key ]"
    openssl pkey -in "${1}".key -noout -text
    printf '\n%s\n\n' "[ ${1}.pub ]"
    openssl pkey -pubin -in "${1}".pub -noout -text
    printf '\n%s\n\n' "[ ${1}.csr ]"
    openssl req -in "${1}".csr -noout -text
    printf '\n%s\n\n' "[ ${1}.crt ]"
    openssl x509 -in "${1}".crt -noout -text
    echo --+
}

# [ Root CA ]

#openssl genrsa -out ca.key 4096
openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -out ca.key
openssl req \
    -new \
    -key ca.key \
    -sha512 \
    -subj '/O=Privacy Guard/OU=Public Key Infrastructure/CN=Root CA X1' \
    -x509 \
    -days 8250 \
    -config - \
    -extensions root_ca \
    -out ca.crt \
    << 'EOF'
.include /etc/ssl/openssl.cnf

[ root_ca ]
basicConstraints=critical,CA:TRUE
keyUsage=critical,digitalSignature,keyCertSign,cRLSign

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
EOF

#openssl req \
#    -new \
#    -newkey rsa -pkeyopt rsa_keygen_bits:4096 -nodes -keyout ca.key \
#    -sha512 \
#    -subj '/O=Privacy Guard/OU=Public Key Infrastructure/CN=Root CA X1' \
#    -x509 \
#    -days 8250 \
#    -config - \
#    -extensions root_ca \
#    -out ca.crt
#    -out ca.crt \
#    << 'EOF'
#.include /etc/ssl/openssl.cnf
#
#[ root_ca ]
#basicConstraints=critical,CA:TRUE
#keyUsage=critical,digitalSignature,keyCertSign,cRLSign
#
#subjectKeyIdentifier=hash
#authorityKeyIdentifier=keyid:always,issuer
#EOF

openssl pkey -pubout -in ca.key -out ca.pub

openssl x509 \
    -x509toreq \
    -in ca.crt \
    -signkey ca.key \
    -sha512 \
    -out ca.csr

if [ "${ENABLE_DIGEST}" = true ]; then
    digest ca
fi

if [ "${VERBOSE}" = true ]; then
    inspect ca
fi

# [ Intermediate CA ]

case ${PUBLIC_KEY_ALGORITHM} in
ED25519)
    openssl genpkey -algorithm "${PUBLIC_KEY_ALGORITHM}" -out interm.key
    ;;
ED448)
    openssl genpkey -algorithm "${PUBLIC_KEY_ALGORITHM}" -out interm.key
    ;;
*)
    openssl genpkey -algorithm "${PUBLIC_KEY_ALGORITHM}" -out interm.key -pkeyopt rsa_keygen_bits:4096
    ;;
esac

openssl req \
    -new \
    -key interm.key \
    -sha512 \
    -subj '/O=Privacy Guard/OU=Public Key Infrastructure/CN=Intermediate CA X1' \
    -out interm.csr

#openssl req \
#    -new \
#    -newkey rsa -pkeyopt rsa_keygen_bits:4096 -nodes -keyout interm.key \
#    -sha512 \
#    -subj '/O=Privacy Guard/OU=Public Key Infrastructure/CN=Intermediate CA X1' \
#    -out interm.csr

openssl pkey -pubout -in interm.key -out interm.pub

openssl x509 \
    -req \
    -CA ca.crt -CAkey ca.key \
    -CAcreateserial \
    -sha512 \
    -in interm.csr \
    -days 1650 \
    -extfile - \
    -extensions interm_ca \
    -out interm.crt \
    << 'EOF'
[ interm_ca ]
basicConstraints=critical,CA:TRUE,pathlen:0
keyUsage=critical,digitalSignature,keyCertSign,cRLSign

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
EOF

if [ "${ENABLE_DIGEST}" = true ]; then
    digest interm
fi

if [ "${VERBOSE}" = true ]; then
    inspect interm
fi

# [ End Entity ]

#openssl genrsa -out "${CERT_NAME}".key 4096
openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -out "${CERT_NAME}".key
openssl req \
    -new \
    -key "${CERT_NAME}".key \
    -sha512 \
    -subj "/O=Privacy Guard/OU=Public Key Infrastructure/CN=${CERT_NAME}" \
    -addext "subjectAltName=DNS:${CERT_NAME},DNS:localhost,IP:127.0.0.1,IP:::1" \
    -out "${CERT_NAME}".csr

#openssl req \
#    -new \
#    -newkey rsa -pkeyopt rsa_keygen_bits:4096 -nodes -keyout "${CERT_NAME}".key \
#    -sha512 \
#    -subj "/O=Privacy Guard/OU=Public Key Infrastructure/CN=${CERT_NAME}" \
#    -addext "subjectAltName=DNS:${CERT_NAME},DNS:localhost,IP:127.0.0.1,IP:::1" \
#    -out "${CERT_NAME}".csr

openssl pkey -pubout -in "${CERT_NAME}".key -out "${CERT_NAME}".pub

openssl x509 \
    -req \
    -CA interm.crt -CAkey interm.key \
    -CAcreateserial \
    -sha512 \
    -in "${CERT_NAME}".csr \
    -days 825 \
    -extfile - \
    -extensions end_entity \
    -out "${CERT_NAME}".crt \
    << EOF
[ end_entity ]
basicConstraints=critical,CA:FALSE

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
subjectAltName=DNS:${CERT_NAME},DNS:localhost,IP:127.0.0.1,IP:::1
EOF

if [ "${ENABLE_DIGEST}" = true ]; then
    digest "${CERT_NAME}"
fi

if [ "${VERBOSE}" = true ]; then
    inspect "${CERT_NAME}"
fi

# [ Chain of Trust ]

cat "${CERT_NAME}".crt interm.crt | tee chain.crt &> /dev/null

if [ "${STRICT_VERIFICATION}" = true ]; then
    echo +--
    openssl verify -CAfile ca.crt -no-CApath -show_chain ca.crt
    openssl verify -CAfile ca.crt -no-CApath -show_chain interm.crt
    openssl verify -CAfile ca.crt -no-CApath -show_chain -untrusted interm.crt "${CERT_NAME}".crt
    echo --+
fi

openssl verify -CAfile ca.crt -no-CApath -show_chain -untrusted interm.crt chain.crt
