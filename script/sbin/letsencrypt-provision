#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]... MODE DOMAIN

Options:
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Arguments:
    MODE (request | revoke)
        certificate provision mode
    DOMAIN
        domain name to apply
EOF
}

while (( $# > 0 )); do
    case ${1} in
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

: "${1?✗ argument parsing failed: missing argument ‘MODE’}"
case ${1} in
request | revoke)
    MODE=${1}
    ;;
*)
    die "✗ argument parsing failed: acceptable values for ‘MODE’ are request | revoke"
    ;;
esac
DOMAIN=${2?✗ argument parsing failed: missing argument ‘DOMAIN’}
shift 2

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

if (( EUID != 0 )); then
    die '✗ This script must be run as root'
fi

clean_up () {
    true
}

trap clean_up EXIT

if [ "${MODE}" = request ]; then
    certbot certonly \
        --domains "${DOMAIN}" \
        --manual \
        --manual-public-ip-logging-ok \
        --preferred-challenges dns \
        --renew-by-default \
        --rsa-key-size 4096
else
    certbot revoke \
        --cert-path "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" \
        --delete-after-revoke \
        --reason superseded
fi
