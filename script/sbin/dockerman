#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]... SERVICE_NAME

Options:
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Arguments:
    SERVICE_NAME (alertmanager | coredns | gotify | grafana | minio | mosquitto | nginx | node-exporter | postgres | prometheus | v2ray)
        service name of the container to be deployed
EOF
}

while (( $# > 0 )); do
    case ${1} in
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

NAME=${1?✗ argument parsing failed: missing argument ‘NAME’}
case ${1} in
alertmanager | coredns | gotify | grafana | minio | mosquitto | nginx | node-exporter | postgres | prometheus | v2ray)
    NAME=${1}
    ;;
*)
    die "✗ argument parsing failed: acceptable values for ‘NAME’ are alertmanager | coredns | gotify | grafana | minio | mosquitto | nginx | node-exporter | postgres | prometheus | v2ray"
    ;;
esac
shift

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

if (( EUID != 0 )); then
    die '✗ This script must be run as root'
fi

clean_up () {
    docker image prune --force
}

trap clean_up EXIT

if [ -n "$(docker container ls --all --filter name='^/'"${NAME}"'$' --format '.')" ]; then
    docker container stop "${NAME}"
    docker container rm --volumes "${NAME}"
fi

case ${NAME} in
alertmanager)
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 172.24.0.1:9093:9093 \
        --restart always \
        --volume /srv/alertmanager/data:/alertmanager \
        --volume /srv/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml \
        quay.io/prometheus/alertmanager
    ;;
coredns)
    # shellcheck disable=2102
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 127.0.0.1:53:53/udp \
        --publish 172.24.0.1:53:53/udp \
        --publish 172.24.0.1:9153:9153 \
        --publish 53:53/tcp \
        --publish [::1]:53:53/udp \
        --restart always \
        --volume /srv/coredns/Corefile:/Corefile \
        --volume /srv/coredns/zones:/zones \
        coredns/coredns
    ;;
gotify)
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 221:221 \
        --restart always \
        --volume /srv/gotify/certs:/app/certs \
        --volume /srv/gotify/config.yml:/etc/gotify/config.yml \
        --volume /srv/gotify/data:/app/data \
        gotify/server
    ;;
grafana)
    docker run \
        --detach \
        --env TZ="$(< /etc/timezone)" \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 3000:3000 \
        --restart always \
        --volume /srv/grafana/data:/var/lib/grafana \
        --volume /srv/grafana/grafana.ini:/etc/grafana/grafana.ini \
        grafana/grafana
    ;;
minio)
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 256:9000 \
        --restart always \
        --volume /srv/minio:/root/.minio \
        --volume /srv/s3:/data \
        minio/minio --json server /data
    ;;
mosquitto)
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 1883:1883 \
        --restart always \
        --volume /srv/mosquitto:/mosquitto/config \
        eclipse-mosquitto
    ;;
nginx)
    docker run \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name nginx \
        --publish 8000:80 \
        --rm \
        --volume "${PWD}":/usr/share/nginx/html \
        --volume /srv/nginx/default.conf:/etc/nginx/conf.d/default.conf \
        nginx
    exit
    ;;
node-exporter)
    docker run \
        --detach \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --net host \
        --pid host \
        --restart always \
        --volume /:/host:ro,rslave \
        prom/node-exporter --path.rootfs /host --web.listen-address 172.24.0.1:9100
    ;;
postgres)
    docker run \
        --detach \
        --env POSTGRES_PASSWORD=bonsoir \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 172.24.0.1:5432:5432 \
        --restart always \
        --volume /srv/postgres/data:/var/lib/postgresql/data \
        postgres:12
    ;;
prometheus)
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 172.24.0.1:9090:9090 \
        --restart always \
        --volume /srv/prometheus/data:/prometheus \
        --volume /srv/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
        --volume /srv/prometheus/conf.d:/etc/prometheus/conf.d \
        prom/prometheus
    ;;
*)
    docker run \
        --detach \
        --hostname xyz \
        --label maintainer=sysadmin@local.domain \
        --name "${NAME}" \
        --network cluster \
        --publish 6666:6666 \
        --restart always \
        --volume /srv/v2ray/config.json:/etc/v2ray/config.json \
        v2fly/v2fly-core v2ray -config=/etc/v2ray/config.json
    ;;
esac

docker container logs "${NAME}"
