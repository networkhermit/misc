#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]... SERVICE_NAME

Options:
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit

Arguments:
    SERVICE_NAME (alertmanager | coredns | gotify | grafana | minio | mosquitto | nginx | node-exporter | postgres | prometheus | v2ray)
        service name of the container to be deployed
EOF
}

while (( $# > 0 )); do
    case ${1} in
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

NAME=${1?✗ argument parsing failed: missing argument ‘NAME’}
case ${1} in
alertmanager | caddy | coredns | gotify | grafana | minio | mosquitto | nginx | node-exporter | postgres | prometheus | v2ray)
    NAME=${1}
    ;;
*)
    die "✗ argument parsing failed: acceptable values for ‘NAME’ are alertmanager | caddy | coredns | gotify | grafana | minio | mosquitto | nginx | node-exporter | postgres | prometheus | v2ray"
    ;;
esac
shift

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

if (( EUID != 0 )); then
    die '✗ This script must be run as root'
fi

clean_up () {
    docker image prune --force
}

trap clean_up EXIT

if [ -n "$(docker container ls --all --filter name='^/'"${NAME}"'$' --format '.')" ]; then
    docker container stop "${NAME}"
    docker container rm --volumes "${NAME}"
fi

case ${NAME} in
alertmanager)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 172.24.0.1:9093:9093 \
        --restart always \
        --mount type=bind,source=/srv/alertmanager/data,destination=/alertmanager \
        --mount type=bind,source=/srv/alertmanager/alertmanager.yml,destination=/etc/alertmanager/alertmanager.yml \
        quay.io/prometheus/alertmanager
    ;;
caddy)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 80:80 \
        --publish 443:443 \
        --restart always \
        --mount type=bind,source=/srv/caddy/Caddyfile,destination=/etc/caddy/Caddyfile \
        --mount type=bind,source=/srv/caddy/config,destination=/config \
        --mount type=bind,source=/srv/caddy/data,destination=/data \
        caddy
    ;;
coredns)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 127.0.0.1:53:53/udp \
        --publish 172.24.0.1:53:53/udp \
        --publish 172.24.0.1:9153:9153 \
        --publish 53:53/tcp \
        --publish "[::1]:53:53/udp" \
        --restart always \
        --mount type=bind,source=/srv/coredns/Corefile,destination=/Corefile \
        --mount type=bind,source=/srv/coredns/zones,destination=/zones \
        coredns/coredns
    ;;
gotify)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 221:443 \
        --restart always \
        --mount type=bind,source=/srv/gotify/certs,destination=/app/certs \
        --mount type=bind,source=/srv/gotify/config.yml,destination=/etc/gotify/config.yml \
        --mount type=bind,source=/srv/gotify/data,destination=/app/data \
        gotify/server
    ;;
grafana)
    docker run \
        --detach \
        --env TZ="$(< /etc/timezone)" \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 3000:3000 \
        --restart always \
        --mount type=bind,source=/srv/grafana/data,destination=/var/lib/grafana \
        --mount type=bind,source=/srv/grafana/grafana.ini,destination=/etc/grafana/grafana.ini \
        grafana/grafana
    ;;
minio)
    docker run \
        --detach \
        --env-file /srv/minio/env \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 9000:9000 \
        --publish 9001:9001 \
        --restart always \
        --mount type=bind,source=/srv/minio,destination=/root/.minio \
        --mount type=bind,source=/srv/s3,destination=/data \
        minio/minio \
        --json server /data --console-address :9001
    ;;
mosquitto)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 1883:1883 \
        --restart always \
        --mount type=bind,source=/srv/mosquitto,destination=/mosquitto/config \
        eclipse-mosquitto
    ;;
nginx)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name nginx \
        --network cluster \
        --publish 8000:80 \
        --restart always \
        --mount type=bind,source=/srv/nginx/html,destination=/usr/share/nginx/html \
        --mount type=bind,source=/srv/nginx/default.conf,destination=/etc/nginx/conf.d/default.conf \
        nginx
    exit
    ;;
node-exporter)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --net host \
        --pid host \
        --restart always \
        --mount type=bind,source=/,destination=/host,readonly,bind-propagation=rslave \
        prom/node-exporter \
        --path.rootfs /host --web.listen-address 172.24.0.1:9100
    ;;
postgres)
    docker run \
        --detach \
        --env POSTGRES_PASSWORD=bonsoir \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 172.24.0.1:5432:5432 \
        --restart always \
        --mount type=bind,source=/srv/postgres/data,destination=/var/lib/postgresql/data \
        postgres:12
    ;;
prometheus)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 172.24.0.1:9090:9090 \
        --restart always \
        --mount type=bind,source=/srv/prometheus/data,destination=/prometheus \
        --mount type=bind,source=/srv/prometheus/prometheus.yml,destination=/etc/prometheus/prometheus.yml \
        --mount type=bind,source=/srv/prometheus/conf.d,destination=/etc/prometheus/conf.d \
        prom/prometheus
    ;;
*)
    docker run \
        --detach \
        --label maintainer=kubernetes-operator \
        --name "${NAME}" \
        --network cluster \
        --publish 6666:6666 \
        --restart always \
        --mount type=bind,source=/srv/v2ray/config.json,destination=/etc/v2ray/config.json \
        v2fly/v2fly-core \
        v2ray -config=/etc/v2ray/config.json
    ;;
esac

docker container logs "${NAME}"
