#!/bin/bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

warn () {
    if (( $# > 0 )); then
        echo "${@}" 1>&2
    fi
}

die () {
    warn "${@}"
    exit 1
}

notify () {
    local code=$?
    warn "✗ [FATAL] $(caller): ${BASH_COMMAND} (${code})"
}

trap notify ERR

display_help () {
    cat << EOF
Synopsis:
    ${0##*/} [OPTION]...

Options:
    -h, --help
        show this help message and exit
    -v, --version
        output version information and exit
EOF
}

while (( $# > 0 )); do
    case ${1} in
    -h | --help)
        display_help
        shift
        exit
        ;;
    -v | --version)
        echo v0.1.0
        shift
        exit
        ;;
    --)
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

if (( $# > 0 )); then
    die "✗ argument parsing failed: unrecognizable argument ‘${1}’"
fi

if (( EUID != 0 )); then
    die '✗ This script must be run as root'
fi

clean_up () {
    true
}

trap clean_up EXIT

FORMAT=

FORMAT+='{{printf "%s\n\n" .Name}}'

FORMAT+='{{range .IPAM.Config}}'
FORMAT+='{{printf "\t%s\n" .Gateway}}'
FORMAT+='{{printf "\t%s\n" .Subnet}}'
FORMAT+='{{end}}'

FORMAT+='{{range .Containers}}'
FORMAT+='{{printf "\t%s\t\t%s\n" .IPv4Address .Name}}'
FORMAT+='{{end}}'

docker network inspect cluster --format "${FORMAT}"

FORMAT='{{if .Ports}}{{printf "\t%-16s\t%s" .Names .Ports}}{{end}}'

docker container ls --format "${FORMAT}" --no-trunc | awk 'NF' | sort
